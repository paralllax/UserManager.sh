### START Give user Sudo Permissions
#! /bin/bash
D_RD='\e[38;5;88m'
L_GRN='\e[38;5;41m'
S_BLUE='\e[38;5;45m'
L_GRY='\e[38;5;244m'
WHTE='\e[38;5;231m'
CLR='\e[0m'

trap cleanup SIGINT
cleanup() {
  echo "[ STOPPED ] -- Recieved SIGINT - Cleaned up."
  rm -f -- $0
}

echo "--------------------------------------"
echo -e "${L_GRN}{~} ${WHTE}Device: ${S_BLUE}$HOSTNAME${CLR}"
echo "--------------------------------------"
echo

statreport(){
if [[ $? -gt 0 ]]
then
    echo -e " ${D_RD}[ FAIL ]${CLR} -- ${CTNAME} did not complete succcesfully. Here is the error:"
    echo
    echo "==========="
    echo ${CRNTASK}
    echo "==========="
    echo
else
echo -e " ${L_GRN}[ ${WHTE}OK ${L_GRN}]${CLR} -- ${WHTE}${CTNAME} ${CLR}"
fi
}

if [[ "${1}" == "multiple-on" && "${#@}" -gt "2" ]]
then
    arrayargs=(${@:2})
    # rename array and remove the first item (multiple-on)

    MIDDLE="(( ${#arrayargs[@]} / 2 ))"
    # determine the middle of the array

    END="${#arrayargs[@]}"
    # determine the end position

    NMUSR=${arrayargs[@]:0:${MIDDLE}}
    # select from start to middle (users)

    NMPASS=${arrayargs[@]:${MIDDLE}:${END}}
    # select from middle to end (passwords)

    # We had a check earlier already to make sure en even number of pass & users were
    # sent. As such, the last half should be the passwords, and the first half should 
    # be the users then we set the tags for the next part of the script

    MULTIU="yes"
    MULTIP="yes"
else
    MULTIU="no"
    MULTIP="no"
fi

if [[ "$MULTIU" =~ "yes" && "$MULTIP" =~ "yes" ]]
then
    OIFS=$IFS
    IFS=" "
    ARRAYUSR=($NMUSR)
    ARRAYPASS=(${NMPASS})
    echo
    for ((i=0; i<${#ARRAYUSR[@]}; i++))
    do
        sdofile=${ARRAYUSR[i]}
        if [[ "$sdofile" =~ "." ]]
        then
            sdofile=$(echo $sdofile | sed 's/\./_/g')
        else
            :
        fi
        if [[ -f /etc/sudoers.d/${sdofile} ]]
        then
            echo -e " ${D_RD}[ FAIL ]${CLR} ${D_RD}${sdofile}${CLR} is a pre-existing sudoers file. Please try again."
            exit 1
        else
            :
        fi
        if $(id ${ARRAYUSR[i]} >/dev/null 2>&1)
        then
            :
        else
            echo -e "${D_RD}[ FAIL ]${CLR} -- The user ${D_RD}${k}${CLR} doesn't exists. "
            echo -e "            No changes have been made. Please try again"
            exit 1
        fi
        CTNAME="Grant user ${S_BLUE}${ARRAYUSR[i]}${WHTE} sudo permissions"
        CRNTASK=$(echo "${ARRAYUSR[i]} ALL=(ALL) ${ARRAYPASS[i]}" >> /etc/sudoers.d/${sdofile} 2>&1) &&
        statreport
    
        CTNAME="Set correct permissions for sudoers.d file"
        CRNTASK=$(chmod 0440 /etc/sudoers.d/${sdofile} 2>&1)
        statreport

        CTNAME="Check for file errors for sudoers"
        CRNTASK=$(visudo -cf /etc/sudoers.d/${sdofile} 2>&1)
        statreport
        done
    IFS=$OIFS
else
    if $(id ${1} >/dev/null 2>&1)
    then
        :
    else
        echo -e "${D_RD}[ FAIL ]${CLR} -- The user ${D_RD}${1}${CLR} doesn't exist."
        echo -e "            No changes have been made. Please try again"
        exit 1
    fi
    # sudoers.d won't accept '.' - changes it to _ if present
    sdofile=${1}
    if [[ "$sdofile" =~ "." ]]
    then
       sdofile=$(echo $sdofile | sed 's/\./_/g')
    else
      :
    fi
    if [[ -f /etc/sudoers.d/${sdofile} ]]
    then
        echo -e " ${D_RD}[ FAIL ]${CLR} ${D_RD}${sdofile}${CLR} is a pre-existing sudoers file. Please try again."
        exit 1
    else
        :
    fi
    CTNAME="Grant user ${S_BLUE}${1}${WHTE} sudo permissions"
    CRNTASK=$(echo "${1} ALL=(ALL) ${2}" >> /etc/sudoers.d/${sdofile} 2>&1) &&
    statreport

    CTNAME="Set correct permissions for sudoers.d file"
    CRNTASK=$(chmod 0440 /etc/sudoers.d/${sdofile} 2>&1)
    statreport

    CTNAME="Check for file errors for sudoers"
    CRNTASK=$(visudo -cf /etc/sudoers.d/${sdofile} 2>&1)
    statreport
fi

rm -f -- $0
### END Give user Sudo Permissions
